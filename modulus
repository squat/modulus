#!/bin/bash
set -e

# shellcheck disable=SC1091
{
    [ -f /usr/share/coreos/release ] && source /usr/share/coreos/release
    [ -f /usr/share/coreos/update.conf ] && source /usr/share/coreos/update.conf
    [ -f /etc/coreos/update.conf ] && source /etc/coreos/update.conf
}
MODULUS_BIN_DIR=${MODULUS_BIN_DIR:-/opt/modulus}
# shellcheck disable=SC1091
[ -e "$MODULUS_BIN_DIR"/.env ] && source "$MODULUS_BIN_DIR"/.env
MODULUS_CACHE_DIR=${MODULUS_CACHE_DIR:-$MODULUS_BIN_DIR/archive}
MODULUS_COREOS_RELEASE_BOARD=${MODULUS_COREOS_RELEASE_BOARD:-$FLATCAR_RELEASE_BOARD}
MODULUS_COREOS_RELEASE_VERSION=${MODULUS_COREOS_RELEASE_VERSION:-$FLATCAR_RELEASE_VERSION}
MODULUS_CHROOT=${MODULUS_CHROOT:-false}
MODULUS_DOCKER=${MODULUS_DOCKER:-false}
MODULUS_DOWNLOAD=${MODULUS_DOWNLOAD:-false}
MODULUS_FORCE=${MODULUS_FORCE:-false}
MODULUS_GROUP=${MODULUS_GROUP:-$GROUP}
MODULUS_IMAGE_VOLSIZE_GIB=${MODULUS_IMAGE_VOLSIZE_GIB:-5}
MODULUS_INSTALL=${MODULUS_INSTALL:-false}
MODULUS_INSTALL_DIR=${MODULUS_INSTALL_DIR:-/opt/drivers}
MODULUS_LD_ROOT=${MODULUS_LD_ROOT:-/}
MODULUS_S3_BUCKET=${MODULUS_S3_BUCKET}
MODULUS_UPLOAD=${MODULUS_UPLOAD:-false}

check_for_update() {
    # shellcheck disable=SC2163
    while read -r e ; do export "$e" ;done < <(update_engine_client -status 2>/dev/null)
    if [ "$CURRENT_OP" == "UPDATE_STATUS_UPDATED_NEED_REBOOT" ] ; then
        MODULUS_COREOS_RELEASE_VERSION=$NEW_VERSION || true
    fi
}

while getopts ":b:B:cCd:Dfg:ir:uv:" o; do
    case $o in
        b)
            MODULUS_COREOS_RELEASE_BOARD=$OPTARG;;
        B)
            MODULUS_S3_BUCKET=$OPTARG;;
        c)
            check_for_update;;
        C)
            MODULUS_CHROOT=true;;
        d)
            MODULUS_CACHE_DIR=$OPTARG;;
        D)
            MODULUS_DOCKER=true;;
        f)
            MODULUS_FORCE=true;;
        g)
            MODULUS_GROUP=$OPTARG
            if [ "$MODULUS_GROUP" != alpha ] && [ "$MODULUS_GROUP" != beta ] && [ "$MODULUS_GROUP" != stable ] ; then
                echo "Usage: $(basename "$0") [-g <alpha|beta|stable>]" 1>&2; exit 1;
            fi
            ;;
        i)
            MODULUS_INSTALL=true;;
        r)
            MODULUS_COREOS_RELEASE_VERSION=$OPTARG;;
        u)
            MODULUS_UPLOAD=true;;
        v)  
            MODULUS_IMAGE_VOLSIZE_GIB=$OPTARG
            if ! [ "$MODULUS_IMAGE_VOLSIZE_GIB" -eq "$MODULUS_IMAGE_VOLSIZE_GIB" ] 2>/dev/null || [ "$MODULUS_IMAGE_VOLSIZE_GIB" -lt 4 ]; then
                echo "err: VOLSIZE value is expressed in GiB and must be an integer >= 4" 1>&2; exit 1;
            fi
            ;;            
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            exit 1
            ;;
    esac
done
shift $((OPTIND-1))

check_cache() {
    local DRIVER_NAME=$1
    local DRIVER_VERSION=$2
    # shellcheck disable=SC2155
    local KERNEL_VERSION=$(uname -r)
    if [ -d "$MODULUS_CACHE_DIR"/"$DRIVER_NAME"/"$DRIVER_VERSION"/lib/modules/"$KERNEL_VERSION" ]; then
        echo "$DRIVER_NAME $DRIVER_VERSION exists in the cache"
        return 0;
    fi
    return 1;
}

check_status() {
    local DRIVER_NAME=$1
    local DRIVER_VERSION=$2
    # shellcheck disable=SC2155
    local KERNEL_VERSION=$(uname -r)
    if [ -d "$MODULUS_INSTALL_DIR"/"$DRIVER_NAME"/lib/modules/"$KERNEL_VERSION" ] && [ "$MODULUS_CACHE_DIR"/"$DRIVER_NAME"/"$DRIVER_VERSION" -ef "$MODULUS_INSTALL_DIR"/"$DRIVER_NAME" ]; then
        echo "$DRIVER_NAME $DRIVER_VERSION is up to date"
        return 0;
    fi
    echo "$DRIVER_NAME $DRIVER_VERSION is out of date" 1>&2
    return 1;
}

compile() {
    local DRIVER_NAME=$1
    local DRIVER_VERSION=$2

    if [ "$MODULUS_DOWNLOAD" = true ] && ( [ "$MODULUS_FORCE" = true ] || ! check_cache "$DRIVER_NAME" "$DRIVER_VERSION" ) ; then
        download "$DRIVER_NAME" "$DRIVER_VERSION" || true
    fi

    if [ "$MODULUS_FORCE" = true ] || ! check_status "$DRIVER_NAME" "$DRIVER_VERSION" && ! check_cache "$DRIVER_NAME" "$DRIVER_VERSION" ; then
        local CONTAINER_URL=https://$MODULUS_GROUP.release.flatcar-linux.net/$MODULUS_COREOS_RELEASE_BOARD/$MODULUS_COREOS_RELEASE_VERSION/flatcar_developer_container.bin.bz2

        echo "Compiling kernel modules for $DRIVER_NAME $DRIVER_VERSION, Container Linux $MODULUS_GROUP $MODULUS_COREOS_RELEASE_BOARD $MODULUS_COREOS_RELEASE_VERSION"
        mkdir -p "$MODULUS_CACHE_DIR"/"$DRIVER_NAME"/"$DRIVER_VERSION"
        pushd "$MODULUS_CACHE_DIR"/"$DRIVER_NAME"/"$DRIVER_VERSION" > /dev/null
        curl -L https://www.flatcar-linux.org/security/image-signing-key/Flatcar_Image_Signing_Key.asc | gpg --import

        curl -L "$CONTAINER_URL" | tee >(bzip2 -d > flatcar_developer_container.bin) | gpg2 --verify <(curl -LsS "$CONTAINER_URL.sig") -

        if [ "$MODULUS_CHROOT" = true ] ; then
            truncate_bin flatcar_developer_container.bin
            # shellcheck disable=SC2155
            local DIR=$(mktemp -d)
            mount flatcar_developer_container.bin "$DIR"
            mkdir -p "$DIR"/opt/modulus
            mount -o bind,ro "$MODULUS_BIN_DIR" "$DIR"/opt/modulus
            mkdir -p "$DIR"/out
            mount --bind "$PWD" "$DIR"/out
            run_chroot "$DIR" /opt/modulus/"$DRIVER_NAME"/compile
            umount "$DIR"/out
            umount "$DIR"/opt/modulus
            umount "$DIR"
        elif [ "$MODULUS_DOCKER" = true ] ; then
            bin_to_tar flatcar_developer_container.bin flatcar_developer_container
            docker run --rm \
                -v "$MODULUS_BIN_DIR":/opt/modulus:ro \
                -v "$PWD":/out \
                -e DRIVER_VERSION="$DRIVER_VERSION" \
                flatcar_developer_container /opt/modulus/"$DRIVER_NAME"/compile
        else
            systemd-nspawn \
                --as-pid2 \
                --bind-ro="$MODULUS_BIN_DIR":/opt/modulus \
                --bind="$PWD":/out \
                --setenv=DRIVER_VERSION="$DRIVER_VERSION" \
                --image=flatcar_developer_container.bin \
                --register=no \
                /opt/modulus/"$DRIVER_NAME"/compile
        fi
        rm -f flatcar_developer_container.bin
    fi

    if [ "$MODULUS_UPLOAD" = true ] ; then
        upload "$DRIVER_NAME" "$DRIVER_VERSION"
    fi

    if [ "$MODULUS_INSTALL" = true ] ; then
        install "$DRIVER_NAME" "$DRIVER_VERSION"
    fi
}

run_chroot() {
    if [ -z "$1" ] || [ -z "$2" ] ; then
        echo "err: no dir or no command specified"
        return 1
    fi

    local DIR=$1
    shift
    cp --dereference /etc/resolv.conf "$DIR"/etc/resolv.conf
    mount --bind /dev "$DIR"/dev
    mount --bind /dev/pts "$DIR"/dev/pts
    mount --bind /proc "$DIR"/proc
    mount -t tmpfs tmpfs "$DIR"/tmp
    DRIVER_VERSION="$DRIVER_VERSION" chroot "$DIR" "$@"
    umount "$DIR"/tmp
    umount "$DIR"/proc
    umount "$DIR"/dev/pts
    umount "$DIR"/dev
}

truncate_bin() {
    if [ -z "$1" ] ; then
        echo "err: no binary specified"
        return 1
    fi

    local IN=$1
    # shellcheck disable=SC2155
    local START=$(gdisk -l "$IN" | grep ROOT | awk '{print $2}')
    # shellcheck disable=SC2155
    local END=$(gdisk -l "$IN" | grep ROOT | awk '{print $3}')
    dd if="$IN" of="$IN" bs=512 skip="$START" conv=notrunc
    truncate -s $(((END-4096+1)*512)) "$IN"
    resize_image_vol "$IN"
}

resize_image_vol() {
    local IN=$1
    # shellcheck disable=SC2155
    local BYTES_AVAILABLE=$(df --output=avail -B 1 . | tail -1)
    # shellcheck disable=SC2155
    local TOTAL_BYTES_FOR_IMAGE=$((MODULUS_IMAGE_VOLSIZE_GIB*1073741824))
    if ! [ "$TOTAL_BYTES_FOR_IMAGE" -lt "$BYTES_AVAILABLE" ]; then
        echo "err: not enough disk space. $TOTAL_BYTES_FOR_IMAGE-byte image volume size requested but there are only $BYTES_AVAILABLE bytes availble on-disk"
        exit 1
    fi
    truncate -s "$TOTAL_BYTES_FOR_IMAGE" "$IN"
    resize2fs -f "$IN" "${MODULUS_IMAGE_VOLSIZE_GIB}G"
}

bin_to_tar() {
    if [ -z "$1" ] || [ -z "$2" ] ; then
        echo "err: no binary or no tar specified"
        return 1
    fi

    local IN=$1
    local OUT=$2

    truncate_bin "$IN"
    # shellcheck disable=SC2155
    local DIR=$(mktemp -d)
    mount "$IN" "$DIR"
    rm "$IN"
    pushd "$DIR" > /dev/null
    tar -c . | docker import - "$OUT"
    popd > /dev/null
    umount "$DIR"
}

install() {
    local DRIVER_NAME=$1
    local DRIVER_VERSION=$2
    mkdir -p "$MODULUS_INSTALL_DIR"
    rm -rf "${MODULUS_INSTALL_DIR:?}"/"$DRIVER_NAME"
    ln -s "$MODULUS_CACHE_DIR"/"$DRIVER_NAME"/"$DRIVER_VERSION" "$MODULUS_INSTALL_DIR"/"$DRIVER_NAME"

    if [ -d "$MODULUS_INSTALL_DIR"/"$DRIVER_NAME"/lib ] ; then
        mkdir -p "$MODULUS_LD_ROOT"/etc/ld.so.conf.d
        echo "$MODULUS_INSTALL_DIR"/"$DRIVER_NAME"/lib > "$MODULUS_LD_ROOT"/etc/ld.so.conf.d/"$DRIVER_NAME".conf
        ldconfig -r "$MODULUS_LD_ROOT" 2> /dev/null
    fi
    # shellcheck disable=SC1090
    source "$MODULUS_BIN_DIR"/"$DRIVER_NAME"/install
}

upload() {
    local DRIVER_NAME=$1
    local DRIVER_VERSION=$2
    mkdir -p "$MODULUS_CACHE_DIR"
    pushd "$MODULUS_CACHE_DIR" > /dev/null
    local t="$MODULUS_COREOS_RELEASE_VERSION"-"$MODULUS_GROUP"-"$DRIVER_NAME"-"$DRIVER_VERSION".tar.gz
    tar -czf "$t" --exclude=flatcar_developer_container* "$DRIVER_NAME"/"$DRIVER_VERSION"

    if aws --version ; then
        aws s3 cp "$t" "$MODULUS_S3_BUCKET"
    elif [ "$MODULUS_DOCKER" = true ] ; then
        docker run --rm \
            -v "$PWD"/"$t":/"$t" \
            -e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
            -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
            --entrypoint=/usr/bin/aws \
            quay.io/coreos/awscli:025a357f05242fdad6a81e8a6b520098aa65a600 \
            s3 cp /"$t" "$MODULUS_S3_BUCKET"
    else
        rkt run \
            --net=host \
            --dns=host \
            --trust-keys-from-https quay.io/coreos/awscli:025a357f05242fdad6a81e8a6b520098aa65a600 \
            --volume=out,kind=host,source="$PWD"/"$t",readOnly=true \
            --mount=volume=out,target=/"$t" \
            --set-env=AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
            --set-env=AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
            --exec=/usr/bin/aws -- s3 cp /"$t" "$MODULUS_S3_BUCKET"
    fi
}

download() {
    local DRIVER_NAME=$1
    local DRIVER_VERSION=$2
    [ "$MODULUS_FORCE" = false ] && check_status "$DRIVER_NAME" "$DRIVER_VERSION" && exit 0

    mkdir -p "$MODULUS_CACHE_DIR"
    pushd "$MODULUS_CACHE_DIR" > /dev/null
    local t="$MODULUS_COREOS_RELEASE_VERSION"-"$MODULUS_GROUP"-"$DRIVER_NAME"-"$DRIVER_VERSION".tar.gz

    if ! curl -k --fail -O "$MODULUS_S3_BUCKET""$t" ; then
        if aws help ; then
            aws s3 cp "$MODULUS_S3_BUCKET""$t" "$t"
        elif [ "$MODULUS_DOCKER" = true ] ; then
            docker run --rm \
                -v "$PWD":/out \
                -e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
                -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
                --entrypoint=/usr/bin/aws \
                quay.io/coreos/awscli:025a357f05242fdad6a81e8a6b520098aa65a600 \
                s3 cp "$MODULUS_S3_BUCKET""$t" /out/"$t"
        else
            rkt run \
                --net=host \
                --dns=host \
                --trust-keys-from-https quay.io/coreos/awscli:025a357f05242fdad6a81e8a6b520098aa65a600 \
                --volume=out,kind=host,source="$PWD" \
                --mount=volume=out,target=/out \
                --set-env=AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
                --set-env=AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
                --exec=/usr/bin/aws -- s3 cp "$MODULUS_S3_BUCKET""$t" /out/"$t"
        fi
    fi

    tar -xf "$t"
}

src() {
    echo "Preparing environment"
    # shellcheck disable=SC1091
    . /usr/share/coreos/release
    /usr/bin/emerge-gitclone
    OVERLAY_VERSION=$(curl -s https://raw.githubusercontent.com/kinvolk/manifest/v"$FLATCAR_RELEASE_VERSION"/main.xml | grep kinvolk/coreos-overlay | sed 's/.*revision="//; s/".*//')
    PORTAGE_VERSION=$(curl -s https://raw.githubusercontent.com/kinvolk/manifest/v"$FLATCAR_RELEASE_VERSION"/main.xml | grep kinvolk/portage-stable | sed 's/.*revision="//; s/".*//')
    git -C /var/lib/portage/coreos-overlay checkout "$OVERLAY_VERSION"
    git -C /var/lib/portage/portage-stable checkout "$PORTAGE_VERSION"
    # try to use pre-built binaries and fall back to building from source
    emerge -gKq --jobs 4 --load-average 4 coreos-sources || emerge -q --jobs 4 --load-average 4 coreos-sources
    cp /lib/modules/*-flatcar*/build/.config /usr/src/linux/.config
    KERNEL_VERSION=$(head -n 3 /usr/src/linux/.config | tail -n 1 | awk '{print $3}')
    make -C /usr/src/linux olddefconfig
    make -C /usr/src/linux modules_prepare
}

usage() {
    printf '%s is a tool for automatically compiling kernel modules.\n\n' "$(basename "$0")"
    printf 'Usage:\n\n \t %s [options] command [arguments]\n\n' "$(basename "$0")"
    printf ' The options are:\n\n'
    printf '\t -b BOARD         \tContainer Linux release board, e.g. amd64-usr\n'
    printf '\t -c               \tcheck for Container Linux release version using update engine\n'
    printf '\t -C               \tcompile in a CHROOT\n'
    printf '\t -d               \tdirectory in which to archive all assets, e.g. /opt/modulus\n'
    printf '\t -D               \trun all containers with Docker\n'
    printf '\t -f               \tforce install even if modules are up to date\n'
    printf '\t -g GROUP         \tContainer Linux release group, i.e. alpha, beta, or stable\n'
    printf '\t -i               \tinstall the modules after compiling\n'
    printf '\t -r RELEASE       \tContainer Linux release version, e.g. 1353.4.0\n'
    printf '\t -u               \tupload the driver to S3 after compiling\n'
    printf '\t -v VOLSIZE       \tvolume size of dev image (in GiB) to use if compiling in CHROOT, must be an integer >= 4\n'    
    printf '\n'
    printf 'The commands are:\n\n'
    printf '\t compile <module> <version> \tbuild the <module> kernel module\n'
    printf '\t download <module> <version>\tdownload the compiled kernel module and assets for <module> from S3 to %s/<module>\n' "$MODULUS_CACHE_DIR"
    printf '\t install <module> <version> \tinstall the <module> kernel module in %s/<module> and install all libraries\n' "$MODULUS_INSTALL_DIR"
    printf '\t src                        \tdownload and install the kernel sources\n'
    printf '\t status <module> <version>  \tcheck if an up-to-date version of <module> is installed\n'
    printf '\t upload <module> <version>  \tupload the compiled kernel module and assets for <module> to s3\n'
    printf '\n'
}

case $1 in
    compile)
        compile "$2" "$3";;
    download)
        download "$2" "$3";;
    install)
        install "$2" "$3";;
    src)
        src;;
    status)
        check_status "$2" "$3" && exit 0 || exit 1;;
    upload)
        upload "$2" "$3";;
    *)
        usage;;
esac
